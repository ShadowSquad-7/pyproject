import pandas as pd
from pathlib import Path
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackContext, MessageHandler, filters
from datetime import datetime
import pytz

TOKEN = "7319480164:AAGqXTP88N9kKJzwDdVD-h7YQt4IfXmiZ28"
DATA_DIR = Path(__file__).parent / "data"

# –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_keyboard = ReplyKeyboardMarkup(
    [
        ["üîÑ –¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã", "‚öô –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª"],
        ["‚è∏ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", "‚Ñπ –ü–æ–º–æ—â—å"]
    ],
    resize_keyboard=True,
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
interval_keyboard = ReplyKeyboardMarkup(
    [
        ["5 –º–∏–Ω—É—Ç", "15 –º–∏–Ω—É—Ç", "30 –º–∏–Ω—É—Ç"],
        ["1 —á–∞—Å", "3 —á–∞—Å–∞", "–ù–∞–∑–∞–¥"]
    ],
    resize_keyboard=True
)

user_settings = {}  # –•—Ä–∞–Ω–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {chat_id: {'interval': minutes}}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üí∞ <b>–ë–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç</b>\n\n"
        "–Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        parse_mode='HTML',
        reply_markup=main_keyboard
    )


async def get_current_rates():
    """–ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –∏–∑ CSV —Ñ–∞–π–ª–æ–≤"""
    rates = {}
    for file in DATA_DIR.glob("*.csv"):
        try:
            df = pd.read_csv(file)
            if not df.empty:
                pair = file.stem.replace('_', '/')
                last_row = df.iloc[-1]
                rates[pair] = f"{float(last_row['Close']):.5f}"  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–µ–Ω—É
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file}: {e}")
    return rates


async def send_rates(context: CallbackContext, chat_id=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—É—â–∏—Ö –∫—É—Ä—Å–æ–≤"""
    if not chat_id and hasattr(context, 'job'):
        chat_id = context.job.chat_id

    if not chat_id:
        return

    try:
        rates = await get_current_rates()
        if not rates:
            await context.bot.send_message(chat_id, "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫—É—Ä—Å–∞—Ö")
            return

        message = "üìä <b>–¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã:</b>\n\n"
        for pair, price in rates.items():
            message += f"<b>{pair}</b>: {price}\n"  # –¢–æ–ª—å–∫–æ –ø–∞—Ä–∞ –∏ —Ü–µ–Ω–∞ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏

        await context.bot.send_message(
            chat_id,
            message,
            parse_mode='HTML',
            reply_markup=main_keyboard
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    chat_id = update.effective_chat.id

    if text == "üîÑ –¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã":
        await send_rates(context, chat_id)
    elif text == "‚öô –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª":
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:",
            reply_markup=interval_keyboard
        )
    elif text == "‚è∏ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è":
        await stop_updates(update, context)
    elif text == "‚Ñπ –ü–æ–º–æ—â—å":
        await show_help(update)
    elif text in ["5 –º–∏–Ω—É—Ç", "15 –º–∏–Ω—É—Ç", "30 –º–∏–Ω—É—Ç", "1 —á–∞—Å", "3 —á–∞—Å–∞"]:
        minutes = int(text.split()[0]) if text != "1 —á–∞—Å" else 60
        minutes = 180 if text == "3 —á–∞—Å–∞" else minutes
        await set_update_interval(update, context, minutes)
    elif text == "–ù–∞–∑–∞–¥":
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=main_keyboard
        )


async def set_update_interval(update: Update, context: ContextTypes.DEFAULT_TYPE, minutes: int):
    chat_id = update.effective_chat.id

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    if chat_id in user_settings:
        old_job = user_settings[chat_id].get('job')
        if old_job:
            old_job.schedule_removal()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    job = context.job_queue.run_repeating(
        callback=send_rates,
        interval=minutes * 60,
        first=0,
        chat_id=chat_id,
        name=str(chat_id)
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    user_settings[chat_id] = {'interval': minutes, 'job': job}

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    if minutes < 60:
        interval_text = f"{minutes} –º–∏–Ω—É—Ç"
    else:
        hours = minutes // 60
        interval_text = f"{hours} —á–∞—Å" + ("–∞" if 1 < hours < 5 else "" if hours == 1 else "–æ–≤")

    await update.message.reply_text(
        f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –∫–∞–∂–¥—ã–µ {interval_text}",
        reply_markup=main_keyboard
    )


async def stop_updates(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id in user_settings:
        user_settings[chat_id]['job'].schedule_removal()
        del user_settings[chat_id]

    await update.message.reply_text(
        "üî¥ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üîÑ –¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã' –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞",
        reply_markup=main_keyboard
    )


async def show_help(update: Update):
    await update.message.reply_text(
        "‚Ñπ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É:</b>\n\n"
        "üîÑ <b>–¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã</b> - –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã\n"
        "‚öô <b>–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª</b> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π\n"
        "‚è∏ <b>–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å</b> - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n\n",
        parse_mode='HTML',
        reply_markup=main_keyboard
    )


def main():
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", show_help))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, button_handler))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...")
    application.run_polling()


if __name__ == "__main__":
    DATA_DIR.mkdir(exist_ok=True)
    main()
